version: 2.1

jobs:
  create_backend_infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout      
      - run:
          name: Ensure backend infrastructure exist
          command: |            
            aws cloudformation deploy \
              --template-file ./.circleci/files/backend.yml \
              --stack-name backend \
              --parameter-overrides ID=${CIRCLE_WORKFLOW_ID:0:7}
      - run:
          name: Save IP
          command: |     
            cd .circleci/ansible/
            echo "[backend]" > inventory.txt
            serverip=$(aws ec2 describe-instances \
                        --filter "Name=tag-value,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
                        --query 'Reservations[*].Instances[*].PublicIpAddress' \
                        --output text)
            echo $serverip >> inventory.txt
            echo $serverip > backend_ip
            sed -i '$ s/$/ ansible_user=ubuntu/' inventory.txt
            cat inventory.txt            
      - run:
          name: Install tar/gzip utility
          command: |
            yum -y install tar
            yum -y install gzip
      - persist_to_workspace:
          root: .circleci/ansible/        
          paths:
            - inventory.txt
            - backend_ip
      - run:
          name: Rollback
          when: on_fail
          command: |           
            aws cloudformation delete-stack --stack-name network
            aws cloudformation delete-stack --stack-name backend

  create_frontend_infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Ensure frontend infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file ./.circleci/files/frontend.yml \
              --stack-name frontend \
              --parameter-overrides ID=${CIRCLE_WORKFLOW_ID:0:7}
      - run:
          name: Rollback
          when: on_fail
          command: |
            aws cloudformation delete-stack --stack-name network
            aws cloudformation delete-stack --stack-name backend
            aws cloudformation delete-stack --stack-name frontend

  create_network_infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Ensure network infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file ./.circleci/files/network.yml \
              --stack-name network \              
              --no-fail-on-empty-changeset 
      - run:
          name: Rollback
          when: on_fail
          command: |            
            aws cloudformation delete-stack --stack-name network

  create_cloudfront_infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Ensure cloudfront infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file ./.circleci/files/cloudfront.yml \
              --stack-name cloudfront \
              --parameter-overrides WorkflowID=${CIRCLE_WORKFLOW_ID:0:7} \              
              --no-fail-on-empty-changeset
      - run:
          name: Rollback
          when: on_fail
          command: |              
            aws cloudformation delete-stack --stack-name network
            aws cloudformation delete-stack --stack-name backend
            aws cloudformation delete-stack --stack-name frontend
            aws cloudformation delete-stack --stack-name cloudfront

  update_cloudfront_infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Update cloudfront to new bucket
          command: | 
            aws cloudformation update-stack \
              --use-previous-template \
              --stack-name cloudfront-prod-b81157ec-576b-4ad8-95c0-f2840283cfc3 \
              --parameters ParameterKey=WorkflowID,ParameterValue=${CIRCLE_WORKFLOW_ID:0:7}

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: "Build backend"
          command: |
            cd backend
            npm install
            npm run build

  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: "Build frontend"
          command: |
            cd frontend
            npm install
            npm run build
            
  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: "Test backend"
          command: |
            cd backend
            npm install
            npm run test
            
  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: "Test frontend"
          command: |
            cd frontend
            npm install
            npm run test
            
  audit-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: "Audit backend"
          command: |
            cd backend
            npm install
            npm audit --audit-level=critical

  audit-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: "Audit frontend"
          command: |
            cd frontend
            npm audit --audit-level=critical

  configure_and_deploy:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["2b:ae:fa:9e:27:5b:f2:60:50:fa:b6:b3:02:ce:d0:eb"]
      - run:
          name: Install dependencies
          command: |
            apk add --update ansible # install the dependencies needed for your playbook
            apk add openssh-client
      - attach_workspace:
          at: .circleci/ansible/
      - run:
          name: Test inventory file
          command: |                        
            cd .circleci/ansible/
            cat inventory.txt
      - run:
          name: Configure and deploy server
          command: |            
            cd .circleci/ansible/            
            ansible-playbook -i inventory.txt playbook.yml
      - run:
          name: Rollback
          when: on_fail
          command: |              
            aws cloudformation delete-stack --stack-name network
            aws cloudformation delete-stack --stack-name backend
            aws cloudformation delete-stack --stack-name frontend
            aws cloudformation delete-stack --stack-name cloudfront

  deploy-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: "Install AWS-CLI"
          command: |
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install
      - attach_workspace:
          at: .circleci/ansible/
      - run:
          name: "Build frontend"
          command: |            
            API_HOST=$(cat .circleci/ansible/backend_ip)
            cd frontend            
            export API_URL=http://$API_HOST:3030
            echo $API_URL
            npm install
            npm run build
      - run:
          name: "Copy frontend to S3"
          command: |
            bucket_name='udapeople-'${CIRCLE_WORKFLOW_ID:0:7}
            aws s3 cp frontend/dist 's3://'$bucket_name'/' --recursive
      - run:
          name: Rollback
          when: on_fail
          command: |              
            aws cloudformation delete-stack --stack-name network
            aws cloudformation delete-stack --stack-name backend
            aws cloudformation delete-stack --stack-name frontend
            aws cloudformation delete-stack --stack-name cloudfront
      
  smoke_test:
    docker:
      - image: amazon/aws-cli
    steps:
      - run:
          name: "Test backend"
          command: |  
            BACKEND_IP=$(aws ec2 describe-instances \
            --filters "Name=tag:Name,Values=backend-bff1ae4" \
            --query 'Reservations[*].Instances[*].PublicIpAddress' \
            --output text)
            curl "http://${BACKEND_IP}:3030/api/status"


workflows:
  default:
    jobs:  
#      - build-backend
#      - build-frontend:
#          requires: 
#            - build-backend
#      - test-backend:
#          requires: 
#            - build-backend
#      - test-frontend:
#          requires:
#            - test-backend
#            - build-frontend
#      - audit-backend:
#          requires:
#            - test-backend
#            - test-frontend
#      - audit-frontend:
#          requires:
#            - test-backend
#            - test-frontend
#      - create_network_infrastructure
#      - create_backend_infrastructure
#          requires: [create_network_infrastructure]
#      - create_frontend_infrastructure
#          requires: [create_network_infrastructure]    
#      - create_cloudfront_infrastructure:
#          requires: create_frontend_infrastructure      
#      - configure_and_deploy:
#          requires: [create_backend_infrastructure]
#      - deploy-frontend:
#          requires: [configure_and_deploy]
#      - update_cloudfront_infrastructure
#          requires: [deploy-frontend]
      - smoke_test
#          requires: [configure_and_deploy]