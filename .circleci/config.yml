version: 2.1

commands:
  destroy_environment:
    steps:
      - run:
          name: Destroy environment
          command: |
            aws cloudformation delete-stack --stack-name prod-${CIRCLE_WORKFLOW_ID}

jobs:
  create_backend_infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Ensure backend infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file ./.circleci/files/backend.yml \
              --stack-name prod-${CIRCLE_WORKFLOW_ID}

      - destroy_environment:
        when: on_fail

  create_frontend_infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Ensure frontend infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file ./.circleci/files/frontend.yml \
              --stack-name prod-${CIRCLE_WORKFLOW_ID}

      - destroy_environment:
        when: on_fail

  create_network_infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Ensure network infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file ./.circleci/files/network.yml \
              --stack-name prod-${CIRCLE_WORKFLOW_ID}         
      - destroy_environment:
        when: on_fail

  create_cloudfront_infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Ensure cloudfront infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file ./.circleci/files/cloudfront.yml \
              --stack-name prod-${CIRCLE_WORKFLOW_ID}
      - destroy_environment:
        when: on_fail

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: "Build backend"
          command: |
            cd backend
            npm install
            npm run build

  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: "Build frontend"
          command: |
            cd frontend
            npm install
            npm run build
            
  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: "Test backend"
          command: |
            cd backend
            npm install
            npm run test
            
  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: "Test frontend"
          command: |
            cd frontend
            npm install
            npm run test
            
  audit-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: "Audit backend"
          command: |
            cd backend
            npm install
            npm audit --audit-level=critical

  audit-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: "Audit frontend"
          command: |
            cd frontend
            npm audit --audit-level=critical

  configure_and_deploy:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["2b:ae:fa:9e:27:5b:f2:60:50:fa:b6:b3:02:ce:d0:eb"]
      - run:
          name: Install dependencies
          command: |
            apk add --update ansible # install the dependencies needed for your playbook
            apk add openssh-client
      - run:
          name: Configure and deploy server
          command: |            
            cd .circleci/ansible/
            ansible-playbook -vvv -i inventory.txt playbook.yml

workflows:
  default:
    jobs:  
#      - build-backend
#      - build-frontend:
#          requires: 
#            - build-backend
#      - test-backend:
#          requires: 
#            - build-backend
#      - test-frontend:
#          requires:
#            - test-backend
#            - build-frontend
#      - audit-backend:
#          requires:
#            - test-backend
#            - test-frontend
#      - audit-frontend:
#          requires:
#            - test-backend
#            - test-frontend
      - create_network_infrastructure
      - create_backend_infrastructure:
          requires:
              - create_network_infrastructure
      - create_frontend_infrastructure:
          requires:
              - create_backend_infrastructure    
      - create_cloudfront_infrastructure:
          requires:
              - create_cloudfront_infrastructure
      
#      - configure_and_deploy