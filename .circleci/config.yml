version: 2.1

commands:
  rollback_cloudformation_stacks:
      steps:
        - run:
            when: on_fail
            name: Rollback
            command: |
              aws s3 rb s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --force
              aws cloudformation delete-stack --stack-name backend-${CIRCLE_WORKFLOW_ID:0:7}
              aws cloudformation delete-stack --stack-name frontend-${CIRCLE_WORKFLOW_ID:0:7}
        - run:
            when: on_fail
            name: Prevents the workflow from continuing
            command: |
              circleci-agent step halt

  rollback_database:
      steps:
        - run:
#            when: on_fail
            name: Rollback
            command: |
              cd backend
              if (( $( curl -H "token: bd38ff90-e828-43d8-b9de-d366e85ffb17" --request GET https://api.memstash.io/values/NO_MIGRATIONS ) == 0 )) ; \
              then npm run migrations:revert ; \
              else echo "No migrations to revert"; fi
        - run:
#            when: on_fail
            name: Prevents the workflow from continuing
            command: |
              circleci-agent step halt

jobs:
  create_backend_infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout      
      - run:
          name: Cloudformation for backend
          command: |            
            aws cloudformation deploy \
              --template-file ./.circleci/files/backend.yml \
              --stack-name backend-${CIRCLE_WORKFLOW_ID:0:7} \
              --parameter-overrides ID=${CIRCLE_WORKFLOW_ID:0:7}
      - run:
          name: Save IP
          command: |     
            cd .circleci/ansible/
            echo "[backend]" > inventory.txt
            serverip=$(aws ec2 describe-instances \
                        --filter "Name=tag-value,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
                        --query 'Reservations[*].Instances[*].PublicIpAddress' \
                        --output text)
            echo $serverip >> inventory.txt
            echo $serverip > backend_ip
            sed -i '$ s/$/ ansible_user=ubuntu/' inventory.txt
            cat inventory.txt
      - run:
          name: Install tar/gzip utility
          command: |
            yum -y install tar
            yum -y install gzip
      - persist_to_workspace:
          root: .circleci/ansible/        
          paths:
            - inventory.txt
            - backend_ip
      - rollback_cloudformation_stacks

  create_frontend_infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Ensure frontend infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file ./.circleci/files/frontend.yml \
              --stack-name frontend-${CIRCLE_WORKFLOW_ID:0:7} \
              --parameter-overrides ID=${CIRCLE_WORKFLOW_ID:0:7}
      - rollback_cloudformation_stacks

  create_network_infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Create or update network infra
          command: |
            aws cloudformation deploy \
              --template-file ./.circleci/files/network.yml \
              --stack-name network \
              --no-fail-on-empty-changeset
      - rollback_cloudformation_stacks

  create_cloudfront_infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Create or update and deploy cloudfront infra
          command: |
            aws cloudformation deploy \
              --template-file ./.circleci/files/cloudfront.yml \
              --stack-name cloudfront \
              --parameter-overrides WorkflowID=${CIRCLE_WORKFLOW_ID:0:7} \
              --no-fail-on-empty-changeset
      - run:
          name: "Record Production Workflow"
          command: | 
            curl -H "Content-Type: text/plain" -H "token: bd38ff90-e828-43d8-b9de-d366e85ffb17" --request PUT --data ${CIRCLE_WORKFLOW_ID:0:7} https://api.memstash.io/values/PROD  
      - rollback_cloudformation_stacks           

#  update_cloudfront_infrastructure:
#    docker:
#      - image: amazon/aws-cli
#    steps:
#      - checkout
#      - run:
#          name: Update cloudfront to new bucket
#          command: | 
#            aws cloudformation update-stack \
#              --use-previous-template \
#              --stack-name cloudfront \
#              --parameters ParameterKey=WorkflowID,ParameterValue=${CIRCLE_WORKFLOW_ID:0:7}
#      - run:
#          name: "Record Production Workflow"
#          command: | 
#            curl -H "Content-Type: text/plain" -H "token: bd38ff90-e828-43d8-b9de-d366e85ffb17" --request PUT --data ${CIRCLE_WORKFLOW_ID:0:7} https://api.memstash.io/values/PROD  

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: "Build backend"
          command: |
            cd backend
            npm install
            npm run build

  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: "Build frontend"
          command: |
            cd frontend
            npm install
            npm run build
            
  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: "Test backend"
          command: |
            cd backend
            npm install
            npm run test
            
  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: "Test frontend"
          command: |
            cd frontend
            npm install
            npm run test
            
  audit-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: "Audit backend"
          command: |
            cd backend
            npm install
            npm audit --audit-level=critical

  audit-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: "Audit frontend"
          command: |
            cd frontend
            npm audit --audit-level=critical

  configure_and_deploy_backend:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["2b:ae:fa:9e:27:5b:f2:60:50:fa:b6:b3:02:ce:d0:eb"]
      - run:
          name: Install dependencies
          command: |
            apk add --update ansible # install the dependencies needed for your playbook
            apk add openssh-client
      - attach_workspace:
          at: .circleci/ansible/
      - run:
          name: Test inventory file
          command: |                        
            cd .circleci/ansible/
            cat inventory.txt
      - run:
          name: Configure and deploy server
          command: |            
            cd .circleci/ansible/            
            ansible-playbook -i inventory.txt playbook.yml
      - rollback_cloudformation_stacks 

  deploy-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: "Install AWS-CLI"
          command: |
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install
      - attach_workspace:
          at: .circleci/ansible/
      - run:
          name: "Build frontend"
          command: |            
            API_HOST=$(cat .circleci/ansible/backend_ip)
            cd frontend            
            export API_URL=http://$API_HOST:3030
            echo $API_URL
            npm install
            npm run build
      - run:
          name: "Copy frontend to S3"
          command: |
            bucket_name='udapeople-'${CIRCLE_WORKFLOW_ID:0:7}
            aws s3 cp frontend/dist 's3://'$bucket_name'/' --recursive
      - rollback_cloudformation_stacks
      
  smoke_test:
    docker:
      - image: amazon/aws-cli
    steps:
      - run:
          name: "Test backend"
          command: |  
            BACKEND_IP=$(aws ec2 describe-instances \
            --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
            --query 'Reservations[*].Instances[*].PublicIpAddress' \
            --output text)            
            URL="http://${BACKEND_IP}:3030/api/status"
            function test
            {
            if (( $( curl -s ${URL} | grep -c "\"status\":\"ok\"" ) > 0 )) ; then return 0; else return 1; fi
            }
            test
      - run:
          name: "Test frontend"
          command: |  
            URL="http://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3.amazonaws.com/index.html#/employees"
            function test
            {
            if (( $( curl -s ${URL} | grep -c "Welcome" ) > 0 )) ; then return 0; else return 1; fi
            }
            test
      - rollback_cloudformation_stacks
    
  db_migrations:  
    docker:
      - image: circleci/node:13.8.0    
    steps:
      - checkout
      - run:
          name: Run database migrations
          command: |  
            cd backend
            npm install
            npm run migrations > migrations.txt
            curl -H "Content-Type: text/plain" -H "token: bd38ff90-e828-43d8-b9de-d366e85ffb17" --request PUT --data $( grep -c "No migrations are pending" migrations.txt ) https://api.memstash.io/values/NO_MIGRATIONS
      - rollback_database
      

  clean_up:
    docker:
      - image: amazon/aws-cli
    steps:
      - run:
          name: "Delete instances that were previously production"
          command: | 
            export OLD_WORKFLOW=$(curl -H "token: bd38ff90-e828-43d8-b9de-d366e85ffb17" --request GET https://api.memstash.io/values/PROD)
            echo $OLD_WORKFLOW
            aws s3 rb s3://udapeople-${OLD_WORKFLOW} --force
            aws cloudformation delete-stack --stack-name backend-${OLD_WORKFLOW}
            aws cloudformation delete-stack --stack-name frontend-${OLD_WORKFLOW}
#            OLD_BACKEND_ID=$(aws ec2 describe-instances \
#              --filters "Name=tag:Name,Values=backend-${OLD_WORKFLOW}" \
#              --query 'Reservations[*].Instances[*].InstanceId' \
#              --output text)            
#            echo $OLD_BACKEND_ID
#            aws ec2 terminate-instances --instance-ids $OLD_BACKEND_ID
#            aws s3 rb s3://udapeople-${OLD_WORKFLOW} --force



workflows:
  default:
    jobs:  
#      - build-backend
#      - build-frontend:
#          requires: 
#            - build-backend
#      - test-backend:
#          requires: 
#            - build-backend
#      - test-frontend:
#          requires:
#            - test-backend
#            - build-frontend
#      - audit-backend:
#          requires:
#            - test-backend
#            - test-frontend
#      - audit-frontend:
#          requires:
#            - test-backend
#            - test-frontend
#      - create_backend_infrastructure:
#          filters:
#            branches:
#              only: master
#            requires: [audit-backend]
#      - create_frontend_infrastructure
#          requires: [audit-frontend]
      - db_migrations          
#      - configure_and_deploy_backend:
#          requires: [create_backend_infrastructure]
#      - deploy-frontend:
#          requires: [configure_and_deploy_backend]
#      - smoke_test:
#          requires: [deploy-frontend]
#      - create_cloudfront_infrastructure:
#          requires: [smoke_test]
#      - clean_up:
#          requires: [create_cloudfront_infrastructure]